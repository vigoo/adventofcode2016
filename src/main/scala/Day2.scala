object Day2 extends App {

  sealed trait Direction
  case object Up extends Direction
  case object Down extends Direction
  case object Left extends Direction
  case object Right extends Direction

  type TraditionalButton = Int
  type DesignButton = Char

  def parseDirection(input: Char): Direction =
    input match {
      case 'R' => Right
      case 'D' => Down
      case 'L' => Left
      case 'U' => Up
      case _ => throw new IllegalArgumentException(s"$input is an unknown direction")
    }

  def moveTraditional(from: TraditionalButton, to: Direction): TraditionalButton = {
    to match {
      case Up if from > 3 => from - 3
      case Down if from < 7 => from + 3
      case Left if from != 1 && from != 4 && from != 7 => from - 1
      case Right if from != 3 && from != 6 && from != 9 => from + 1
      case _ => from
    }
  }

  val moveTable: Map[DesignButton, Map[Direction, DesignButton]] =
    Map(
      '1' -> Map(Left -> '1', Up -> '1', Right -> '1', Down -> '3'),
      '2' -> Map(Left -> '2', Up -> '2', Right -> '3', Down -> '6'),
      '3' -> Map(Left -> '2', Up -> '1', Right -> '4', Down -> '7'),
      '4' -> Map(Left -> '3', Up -> '4', Right -> '4', Down -> '8'),
      '5' -> Map(Left -> '5', Up -> '5', Right -> '6', Down -> '5'),
      '6' -> Map(Left -> '5', Up -> '2', Right -> '7', Down -> 'A'),
      '7' -> Map(Left -> '6', Up -> '3', Right -> '8', Down -> 'B'),
      '8' -> Map(Left -> '7', Up -> '4', Right -> '9', Down -> 'C'),
      '9' -> Map(Left -> '8', Up -> '9', Right -> '9', Down -> '9'),
      'A' -> Map(Left -> 'A', Up -> '6', Right -> 'B', Down -> 'A'),
      'B' -> Map(Left -> 'A', Up -> '7', Right -> 'C', Down -> 'D'),
      'C' -> Map(Left -> 'B', Up -> '8', Right -> 'C', Down -> 'C'),
      'D' -> Map(Left -> 'D', Up -> 'B', Right -> 'D', Down -> 'D')
    )

  def moveDesign(from: DesignButton, to: Direction): DesignButton = {
    moveTable(from)(to)
  }

  def processInstructions[T](moveFun: (T, Direction) => T)(result: Vector[T], instructions: Vector[Direction]): Vector[T] = {
    val startingButton = result.last
    val endingButton = instructions.foldLeft(startingButton)(moveFun)
    result :+ endingButton
  }

  val input =
    """RDLULDLDDRLLLRLRULDRLDDRRRRURLRLDLULDLDLDRULDDLLDRDRUDLLDDRDULLLULLDULRRLDURULDRUULLLUUDURURRDDLDLDRRDDLRURLLDRRRDULDRULURURURURLLRRLUDULDRULLDURRRLLDURDRRUUURDRLLDRURULRUDULRRRRRDLRLLDRRRDLDUUDDDUDLDRUURRLLUDUDDRRLRRDRUUDUUULDUUDLRDLDLLDLLLLRRURDLDUURRLLDLDLLRLLRULDDRLDLUDLDDLRDRRDLULRLLLRUDDURLDLLULRDUUDRRLDUDUDLUURDURRDDLLDRRRLUDULDULDDLLULDDDRRLLDURURURUUURRURRUUDUUURULDLRULRURDLDRDDULDDULLURDDUDDRDRRULRUURRDDRLLUURDRDDRUDLUUDURRRLLRR
      |RDRRLURDDDDLDUDLDRURRLDLLLDDLURLLRULLULUUURLDURURULDLURRLRULDDUULULLLRLLRDRRUUDLUUDDUDDDRDURLUDDRULRULDDDLULRDDURRUURLRRLRULLURRDURRRURLDULULURULRRLRLUURRRUDDLURRDDUUDRDLLDRLRURUDLDLLLLDLRURDLLRDDUDDLDLDRRDLRDRDLRRRRUDUUDDRDLULUDLUURLDUDRRRRRLUUUDRRDLULLRRLRLDDDLLDLLRDDUUUUDDULUDDDUULDDUUDURRDLURLLRUUUUDUDRLDDDURDRLDRLRDRULRRDDDRDRRRLRDULUUULDLDDDUURRURLDLDLLDLUDDLDLRUDRLRLDURUDDURLDRDDLLDDLDRURRULLURULUUUUDLRLUUUDLDRUDURLRULLRLLUUULURLLLDULLUDLLRULRRLURRRRLRDRRLLULLLDURDLLDLUDLDUDURLURDLUURRRLRLLDRLDLDRLRUUUDRLRUDUUUR
      |LLLLULRDUUDUUDRDUUURDLLRRLUDDDRLDUUDDURLDUDULDRRRDDLLLRDDUDDLLLRRLURDULRUUDDRRDLRLRUUULDDULDUUUDDLLDDDDDURLDRLDDDDRRDURRDRRRUUDUUDRLRRRUURUDURLRLDURDDDUDDUDDDUUDRUDULDDRDLULRURDUUDLRRDDRRDLRDLRDLULRLLRLRLDLRULDDDDRLDUURLUUDLLRRLLLUUULURUUDULRRRULURUURLDLLRURUUDUDLLUDLDRLLRRUUDDRLUDUDRDDRRDDDURDRUDLLDLUUDRURDLLULLLLUDLRRRUULLRRDDUDDDUDDRDRRULURRUUDLUDLDRLLLLDLUULLULLDDUDLULRDRLDRDLUDUDRRRRLRDLLLDURLULUDDRURRDRUDLLDRURRUUDDDRDUUULDURRULDLLDLDLRDUDURRRRDLDRRLUDURLUDRRLUDDLLDUULLDURRLRDRLURURLUUURRLUDRRLLULUULUDRUDRDLUL
      |LRUULRRUDUDDLRRDURRUURDURURLULRDUUDUDLDRRULURUDURURDRLDDLRUURLLRDLURRULRRRUDULRRULDLUULDULLULLDUDLLUUULDLRDRRLUURURLLUUUDDLLURDUDURULRDLDUULDDRULLUUUURDDRUURDDDRUUUDRUULDLLULDLURLRRLRULRLDLDURLRLDLRRRUURLUUDULLLRRURRRLRULLRLUUDULDULRDDRDRRURDDRRLULRDURDDDDDLLRRDLLUUURUULUDLLDDULDUDUUDDRURDDURDDRLURUDRDRRULLLURLUULRLUDUDDUUULDRRRRDLRLDLLDRRDUDUUURLRURDDDRURRUDRUURUUDLRDDDLUDLRUURULRRLDDULRULDRLRLLDRLURRUUDRRRLRDDRLDDLLURLLUDL
      |ULURLRDLRUDLLDUDDRUUULULUDDDDDRRDRULUDRRUDLRRRLUDLRUULRDDRRLRUDLUDULRULLUURLLRLLLLDRDUURDUUULLRULUUUDRDRDRUULURDULDLRRULUURURDULULDRRURDLRUDLULULULUDLLUURULDLLLRDUDDRRLULUDDRLLLRURDDLDLRLLLRDLDRRUUULRLRDDDDRUDRUULDDRRULLDRRLDDRRUDRLLDUDRRUDDRDLRUDDRDDDRLLRDUULRDRLDUDRLDDLLDDDUUDDRULLDLLDRDRRUDDUUURLLUURDLULUDRUUUDURURLRRDULLDRDDRLRDULRDRURRUDLDDRRRLUDRLRRRRLLDDLLRLDUDUDDRRRUULDRURDLLDLUULDLDLDUUDDULUDUDRRDRLDRDURDUULDURDRRDRRLLRLDLU
      |""".stripMargin
  val instructions = input.lines.toVector.map(row => row.map(parseDirection).toVector)
  val traditionalCode = instructions.foldLeft(Vector(5))(processInstructions(moveTraditional)).tail
  val designCode = instructions.foldLeft(Vector('5'))(processInstructions(moveDesign)).tail

  println(s"Answer on traditional keypad is ${traditionalCode.mkString}")
  println(s"Answer on design keypad is ${designCode.mkString}")
}
